import pygame

_image_library = {}
def get_image(path):    
    image = pygame.image.load(path)
    return image
    global _image_library
    image = _image_library.get(path)
    if image == None:
            canonicalized_path = path.replace('/', os.sep).replace('\\', os.sep)
            image = pygame.image.load(canonicalized_path)
            _image_library[path] = image
    return image

class Background(pygame.sprite.Sprite):
    def __init__(self, image_file, location):
        pygame.sprite.Sprite.__init__(self)  #call Sprite initializer
        self.image = pygame.image.load(image_file)
        self.rect = self.image.get_rect()
        self.rect.left, self.rect.top = location

class Player(pygame.sprite.Sprite):
    """
    This class represents the ball.
    It derives from the "Sprite" class in Pygame.
    """
 
    def __init__(self):
 
        # Call the parent class (Sprite) constructor
        super().__init__()
 
        self.images = []
        self.images.append(get_image('pacman1.png'))
        self.images.append(get_image('pacman2.png'))
        self.images.append(get_image('pacman3.png'))
        self.images.append(get_image('pacman2.png'))
        
        self.index = 0
        self.image = self.images[self.index]
        
        self.rect = pygame.Rect(5, 5, 64, 64)

    def update(self):
        '''This method iterates through the elements inside self.images and 
        displays the next one each tick. For a slower animation, you may want to 
        consider using a timer of some sort so it updates slower.'''

        imageTicks = 5 # number of loops each animation frame shows for
        self.index += 1
        if self.index >= len(self.images)*imageTicks:
            self.index = 0
        imageCount = int(self.index/imageTicks)
        self.image = self.images[imageCount]

class Runner :

    RADIUS = 10 

    def __init__(self,x,y,vx,vy):
        self.x = x
        self.y = y
        self.vx = vx # remove?
        self.vy = vy
        self.moving = False

    def show(self,col):
        pygame.draw.circle(screen,col,(self.x, self.y),self.RADIUS)

class Map :

    def __init__(self,x,y,width,height,vx):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.vx = vx
        self.moving = False

    def show(self,col):
        pygame.draw.rect(screen, col, pygame.Rect(self.x, self.y, self.width, self.height))

BLACK = (  0,   0,   0)
WHITE = (255, 255, 255)
RED   = (255,   0,   0)
GREEN = (  0, 255,   0)
BLUE  = (  0,   0, 255)

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
SCREEN_BORDER = 10

VELOCITY = 3
FRAMERATE = 40

pygame.init() # starts creating
screen = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])# creates screen
screen.fill(pygame.Color("black"))# gives screen black color
background = Background('background.png', [0,0])
player = Player()
player_group = pygame.sprite.Group(player)
runner = Runner(int((SCREEN_WIDTH-Runner.RADIUS)/4), int((SCREEN_HEIGHT-Runner.RADIUS)*2/3), 0, 0)
map = Map(0, int((SCREEN_HEIGHT-Runner.RADIUS)*2/3)+10, SCREEN_WIDTH, 10, 0)
map.show(pygame.Color("blue"))
runner.show(pygame.Color("green"))
done = False

while not done:
    for event in pygame.event.get():
    	# add button logic for jumping, etc
        if event.type == pygame.QUIT:
            done = True
        
    screen.fill(WHITE)
    screen.blit(background.image, background.rect)
    player_group.update()
    player_group.draw(screen)
    pygame.display.flip()

